state_t state,state_next;
    u1 waiting =0;
    u1 replace;
    u4 index;// Record read and write subscripts
    meta_t meta_replace;
    assign dresp.data_ok=(state==READY);
    assign dresp.data=dataread;
    always_comb begin
        unique case(state) 
            INIT: begin
                dresp.data_ok=0;
                meta_valid=1;
                meta_addr=dreq.addr[9:7];
                meta_strobe=1;
                creq.valid=0;
                if(dreq.addr[63:10]==metaread.meta1.tag_t) begin
                    state_next=READY;
                    data_strobe=0;
                    data_addr={dreq.addr[9:7],1'b0,dreq[6:3]};
                    dresp.data=dataread;
                    creq.valid=1;
                end
                else if (dreq.addr[63:10]==metaread.meta2.tag_t) begin
                    state_next=READY;
                    data_strobe=0;
                    data_addr={dreq.addr[9:7],1'b1,dreq[6:3]};
                    dresp.data=dataread;
                    creq.valid=1;
                end
                else begin
                    if (metaread.meta1.valid==0) begin
                        replace=0;
                        state_next=READFROMCBUS;
                        index=-1;
                        meta_replace=metaread.meta1;
                        creq.valid=1;
                    end
                    else if (metaread.meta2.valid==0) begin
                        replace=1;
                        state_next=READFROMCBUS;
                        index=-1;
                        meta_replace=metaread.meta2;
                        creq.valid=1;
                    end
                    else begin
                        if(metaread.cnt==0) begin
                            replace=0;
                            state_next=metaread.meta1.dirty?WRITEBACKTOCBUS:READFROMCBUS;
                            meta_replace=metaread.meta1;
                            index=-1;
                            creq.valid=1;
                        end
                        else begin
                            replace=0;
                            state_next=metaread.meta1.dirty?WRITEBACKTOCBUS:READFROMCBUS;
                            meta_replace=metaread.meta1;
                            index=-1;
                            creq.valid=1;
                        end
                    end
                end                
            end
            READFROMCBUS:begin
                data_valid=1;
                data_strobe=8'b11111111;
                data_addr={dreq.addr[9:7],replace,index};
                //creq.valid=1;
                creq.burst=AXI_BURST_INCR;
                creq.addr={dreq.addr[63:10],dreq.addr[9:7],7'b0};
                creq.size=MSIZE8;
                creq.len=MLEN16;
                creq.strobe=0;
                datawrite=cresp.data;
                if (cresp.last) begin
                    state_next=READFROMRAM;
                    index=0;
                end
            end
            READFROMRAM:begin
                data_valid=1;
                data_strobe=0;
                data_addr={dreq.addr[9:7],replace,dreq[6:3]};
                //dresp.data=dataread;
                state_next=READY;
            end
            READY:begin
                //dresp.data_ok=1;
                waiting=1;
                state_next=INIT;
            end
            default begin
                
            end
        endcase
    end
    always_ff @( posedge clk ) begin
        if (dreq.valid==0) begin
            state = INIT;
            waiting =0;
            data_valid=0;
            meta_valid=0;
        end
        else begin
            if (waiting==1) begin
                state = INIT;
                waiting =0;
                data_valid=0;
                meta_valid=0;
            end
            else begin
                if (dreq.strobe==0) begin
                    unique case(state)
                        INIT: begin
                            state=state_next;
                        end
                        // WRITEBACKTOCBUS: begin
                        //     data_valid=1;
                        //     data_strobe='0;
                        //     data_addr={dreq.addr[9:7],replace,index};
                        //     creq.valid=1;
                        //     creq.burst=AXI_BURST_INCR;
                        //     creq.addr={meta_replace.tag_t,dreq.addr[9:7],7'b0};
                        //     creq.size=MSIZE8;
                        //     creq.len=MLEN16;
                        //     creq.strobe=8'b11111111;
                        //     creq.data=dataread;
                        //     if (cresp.ready) index+=1;
                        //     if (cresp.last) begin
                        //         state=READFROMCBUS;
                        //         index=-1;
                        //     end               
                        // end
                        READFROMCBUS : begin
                            state=state_next;
                            if (state!=READFROMCBUS) index=-1;
                            else if (cresp.ready) index+=1;
                        end
                        READFROMRAM: begin
                            state=state_next;
                        end
                        READY:begin
                            state=state_next;
                        end
                        default begin
                            state = INIT;
                            waiting =0;
                            data_valid=0;
                            meta_valid=0;
                        end
                    endcase
                end
            end
        end
    end